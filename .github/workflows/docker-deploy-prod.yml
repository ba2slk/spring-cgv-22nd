name: CI/CD Pipeline with Docker - Push based
on:
  push:
    branches:
      - prod

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}

    steps:
      - name: Checkout Source Code
        # uses: 기존 marketplace 상에 등록된 action 사용하기
        uses: actions/checkout@v4

      - name: Authenticate with Docker Registry
        # run: 직접 shell 명령어 실행하기
        run: echo "${{ secrets.DOCKER_REGISTRY_PASSWORD }}" | docker login ${{ secrets.DOCKER_REGISTRY_URL }} --username ${{ secrets.DOCKER_REGISTRY_USER_NAME }} --password-stdin
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_IMAGE_NAME}}:${{ github.sha }}

  deploy:
    name: Deploy to EC2 Server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_EC2_SSH_PORT }}
          script: |
            cd ~
            
            echo "Pulling new image..."
            docker pull ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
            
            echo "Exporting new image tag..."
            export IMAGE_TAG=${{ needs.build.outputs.image_tag }}
            
            echo "Running containers..."
            docker compose up -d
            
            echo "Pruning old images..."
            docker image prune -f
            
            echo "Done. Check container status below."
            docker ps